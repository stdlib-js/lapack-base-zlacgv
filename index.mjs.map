{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/zlacgv.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided-base-reinterpret-complex128';\n\n\n// MAIN //\n\n/**\n* Conjugates each element in a double-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - input array\n* @param {integer} strideZX - `zx` stride length\n* @param {NonNegativeInteger} offsetZX - starting `zx` index\n* @returns {Complex128Array} input array\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import real from '@stdlib/complex-float64-real';\n* import imag from '@stdlib/complex-float64-imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* zlacgv( 3, zx, 1, 0 );\n*\n* var z = zx.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns -2.0\n*/\nfunction zlacgv( N, zx, strideZX, offsetZX ) {\n\tvar zx64;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn zx;\n\t}\n\t// Reinterpret the input array as a real-valued array of interleaved real and imaginary components:\n\tzx64 = reinterpret( zx, 0 );\n\n\t// Adjust the strides and offset:\n\tsx = strideZX * 2;\n\tix = ( offsetZX * 2 ) + 1; // index of the first imaginary component\n\n\t// Conjugate each element by negating the imaginary components...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tzx64[ ix ] = -zx64[ ix ];\n\t\tix += sx;\n\t}\n\treturn zx;\n}\n\n\n// EXPORTS //\n\nexport default zlacgv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Conjugates each element in a double-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - input array\n* @param {integer} strideZX - `zx` stride length\n* @returns {Complex128Array} input array\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import real from '@stdlib/complex-float64-real';\n* import imag from '@stdlib/complex-float64-imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* zlacgv( 3, zx, 1 );\n*\n* var z = zx.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns -2.0\n*/\nfunction zlacgv( N, zx, strideZX ) {\n\treturn ndarray( N, zx, strideZX, stride2offset( N, strideZX ) );\n}\n\n\n// EXPORTS //\n\nexport default zlacgv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport zlacgv from './zlacgv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zlacgv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zlacgv;\n"],"names":["zlacgv","N","zx","strideZX","offsetZX","zx64","ix","sx","i","reinterpret","ndarray","stride2offset","setReadOnly"],"mappings":";;2UAsDA,SAASA,EAAQC,EAAGC,EAAIC,EAAUC,GACjC,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKP,GAAK,EACT,OAAOC,EAUR,IAPAG,EAAOI,EAAaP,EAAI,GAGxBK,EAAgB,EAAXJ,EACLG,EAAkB,EAAXF,EAAiB,EAGlBI,EAAI,EAAGA,EAAIP,EAAGO,IACnBH,EAAMC,IAAQD,EAAMC,GACpBA,GAAMC,EAEP,OAAOL,CACR,CCtBA,SAASF,EAAQC,EAAGC,EAAIC,GACvB,OAAOO,EAAST,EAAGC,EAAIC,EAAUQ,EAAeV,EAAGE,GACpD,CC3BAS,EAAAZ,EAAA,UAAAU"}